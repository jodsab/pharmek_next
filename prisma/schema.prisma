generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  username String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Products {
  id                 Int                  @id @default(autoincrement())
  nombre             String               @unique
  composicion        String
  indicaciones       String
  dosis_y_via        String
  registro_senasa    String? // Mantenido opcional
  animal_mayor_menor String               @default("Animales menores")
  presentaciones     String? // Mantenido opcional
  favoritesListId    Int?
  images             ProductImages[] // Relación One-to-Many (Many side)
  ProductsDestacados ProductsDestacados[] // Relación One-to-Many (Many side)

  // Relaciones Many-to-Many EXPLÍCITAS: Ahora usan modelos de unión
  categoriesOnProducts           ProductsOnCategories[] // <-- CAMBIADO: Ahora referencia el modelo de unión
  distributorLocationsOnProducts ProductsOnDistributorLocations[] // <-- CAMBIADO: Ahora referencia el modelo de unión

  // Este campo parece un Foreign Key... mantenido opcional.
  distributorLocationProductId Int? // Ya es opcional

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categories {
  id           Int                    @id @default(autoincrement())
  categoryName String                 @unique
  // Relación Many-to-Many EXPLÍCITA: Ahora usa modelo de unión
  products     ProductsOnCategories[] // <-- CAMBIADO: Ahora referencia el modelo de unión

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// === MODELO DE UNIÓN EXPLÍCITO para Products <-> Categories ===
// Esta tabla gestiona la relación Many-to-Many "CategoriesToProducts"
model ProductsOnCategories {
  productId  Int // Foreign Key a Products
  product    Products   @relation(fields: [productId], references: [id], onDelete: Cascade) // <--- ON DELETE CASCADE desde Products
  categoryId Int // Foreign Key a Categories
  category   Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade) // <--- ON DELETE CASCADE desde Categories

  createdAt DateTime @default(now()) // Opcional: Puedes añadir timestamps a la tabla de unión

  @@id([productId, categoryId]) // Clave primaria compuesta
  @@map("products_on_categories") // Opcional: Nombre real de la tabla en DB
}

// ===============================================================

model Distributors {
  id        Int                   @id @default(autoincrement())
  name      String
  locations DistributorLocation[] // Relación One-to-Many (Many side)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Hemos ajustado DistributorLocation.products para que sea One-to-Many A LA TABLA DE UNIÓN
model DistributorLocation {
  id Int @id @default(autoincrement())

  address      String
  latitude     Float
  longitude    Float
  contact      String? // Mantenido opcional
  googleMapUrl String? // Mantenido opcional

  // Relación Many-to-Many EXPLÍCITA: Ahora usa modelo de unión
  productsOnDistributorLocations ProductsOnDistributorLocations[] // <-- CAMBIADO: Ahora referencia el modelo de unión

  // Relación a Distributors: Si quieres que borrar un Distributor borre la Location, añade onDelete: Cascade aquí
  distributor   Distributors @relation(fields: [distributorId], references: [id])
  distributorId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductsDestacados {
  id          Int    @id @default(autoincrement())
  orden       Int
  titulo      String
  descripcion String

  imagenPrincipal ProductImages? @relation(fields: [productImagesId], references: [id]) // Relación a 1, es opcional
  productImagesId Int? // Foreign Key, es opcional

  // Relación a Products: Cuando se borra un Product, borrar este ProductsDestacados
  product    Products @relation(fields: [productsId], references: [id], onDelete: Cascade) // <--- MANTENIDO ON DELETE
  productsId Int // Foreign Key, NO es opcional

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImages {
  id        Int    @id @default(autoincrement())
  url       String // URL de la imagen, probablemente requerida
  productId Int // Foreign Key: Una imagen DEBE pertenecer a un Product

  // Relación a Products: Cuando se borra un Product, borrar esta ProductImage
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade) // <--- MANTENIDO ON DELETE

  ProductsDestacados ProductsDestacados[] // Relación Many (un image puede ser imagenPrincipal de varios destacados)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// === MODELO DE UNIÓN EXPLÍCITO para Products <-> DistributorLocation ===
// Esta tabla gestiona la relación Many-to-Many "ProductsToDistributorLocation"
model ProductsOnDistributorLocations {
  productId             Int // Foreign Key a Products
  product               Products            @relation(fields: [productId], references: [id], onDelete: Cascade) // <--- ON DELETE CASCADE desde Products
  distributorLocationId Int // Foreign Key a DistributorLocation
  distributorLocation   DistributorLocation @relation(fields: [distributorLocationId], references: [id], onDelete: Cascade) // <--- ON DELETE CASCADE desde DistributorLocation

  createdAt DateTime @default(now()) // Opcional: Puedes añadir timestamps

  @@id([productId, distributorLocationId]) // Clave primaria compuesta
  @@map("products_on_distributor_locations") // Opcional: Nombre real de la tabla en DB
}

// =======================================================================
